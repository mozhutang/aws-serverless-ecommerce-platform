AWSTemplateFormatVersion: "2010-09-09"
Transform: 'AWS::Serverless-2016-10-31'

Parameters:
  Environment:
    Type: String
    Default: dev
    Description: Environment name
  LogLevel:
    Type: String
    Default: INFO
  RetentionInDays:
    Type: Number
    Default: 30
    Description: CloudWatch Logs retention period for Lambda functions

Globals:
  Function:
    Runtime: python3.9
    Timeout: 30
    Tracing: Active
    Environment:
      Variables:
        LOG_LEVEL: !Ref LogLevel
        ENVIRONMENT: !Ref Environment
        TABLE_NAME: Orders

Resources:
  OrdersTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: Orders
      AttributeDefinitions:
        - AttributeName: orderId
          AttributeType: S
        - AttributeName: listingId
          AttributeType: S
        - AttributeName: userId
          AttributeType: S
      KeySchema:
        - AttributeName: orderId
          KeyType: HASH
      GlobalSecondaryIndexes:
        - IndexName: listingId-index
          KeySchema:
            - AttributeName: listingId
              KeyType: HASH
            - AttributeName: orderId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: userId-index
          KeySchema:
            - AttributeName: userId
              KeyType: HASH
            - AttributeName: Type#orderId
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: true


  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      StageName: !Ref Environment
      DefinitionBody:
        Fn::Transform:
          Name: AWS::Include
          Parameters:
            Location: ./resources/openapi.yaml

  CreateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/create_order/
      Handler: main.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:PutItem
              Resource: !GetAtt OrdersTable.Arn
      Events:
        CreateOrderApi:
          Type: Api
          Properties:
            Path: /orders/create
            Method: post
            RestApiId: !Ref ApiGateway

  CreateOrderFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${CreateOrderFunction}"
      RetentionInDays: !Ref RetentionInDays

  GetOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/get_order/
      Handler: main.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:GetItem
              Resource: !GetAtt OrdersTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
              Resource: "*"
      Events:
        GetOrderApi:
          Type: Api
          Properties:
            Path: /orders/get/{orderId}
            Method: get
            RestApiId: !Ref ApiGateway

  GetOrderFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${GetOrderFunction}"
      RetentionInDays: !Ref RetentionInDays

  ListOrdersFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/list_orders/
      Handler: main.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:Query
              Resource: !GetAtt OrdersTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
              Resource: "*"
      Events:
        ListOrdersApi:
          Type: Api
          Properties:
            Path: /orders/list
            Method: get
            RestApiId: !Ref ApiGateway

  ListOrdersFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${ListOrdersFunction}"
      RetentionInDays: !Ref RetentionInDays

  UpdateOrderFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: src/update_order/
      Handler: main.handler
      Policies:
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - dynamodb:UpdateItem
                - dynamodb:GetItem
              Resource: !GetAtt OrdersTable.Arn
        - Version: "2012-10-17"
          Statement:
            - Effect: Allow
              Action:
                - cognito-idp:AdminGetUser
              Resource: "*"
      Events:
        UpdateOrderApi:
          Type: Api
          Properties:
            Path: /orders/update/{orderId}
            Method: put
            RestApiId: !Ref ApiGateway

  UpdateOrderFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${UpdateOrderFunction}"
      RetentionInDays: !Ref RetentionInDays
